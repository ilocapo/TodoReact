# Makefile pour ToDo App
# Variables
NODE_MODULES = node_modules
DIST = dist
PACKAGE_JSON = package.json

# Couleurs pour les messages
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

# Cibles par d√©faut
.DEFAULT_GOAL := help

# Aide
.PHONY: help
help: ## Affiche cette aide
	@echo "$(BLUE)üìù ToDo App - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Usage: make <command>$(NC)"
	@echo ""

# Installation des d√©pendances
.PHONY: install
install: ## Installe les d√©pendances npm
	@echo "$(BLUE)üì¶ Installation des d√©pendances...$(NC)"
	@if [ -f "$(PACKAGE_JSON)" ]; then \
		npm install; \
		echo "$(GREEN)‚úÖ D√©pendances install√©es avec succ√®s!$(NC)"; \
	else \
		echo "$(RED)‚ùå Fichier package.json introuvable!$(NC)"; \
		exit 1; \
	fi

# V√©rification des d√©pendances
.PHONY: check-deps
check-deps:
	@if [ ! -d "$(NODE_MODULES)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Les d√©pendances ne sont pas install√©es. Installation en cours...$(NC)"; \
		$(MAKE) install; \
	fi

# D√©marrage en mode d√©veloppement
.PHONY: dev
dev: check-deps ## D√©marre l'application en mode d√©veloppement
	@echo "$(BLUE)üöÄ D√©marrage en mode d√©veloppement...$(NC)"
	@echo "$(YELLOW)üí° Ouvrez http://localhost:5173 dans votre navigateur$(NC)"
	@npm run dev

# Construction pour la production
.PHONY: build
build: check-deps ## Construit l'application pour la production
	@echo "$(BLUE)üèóÔ∏è  Construction pour la production...$(NC)"
	@npm run build
	@echo "$(GREEN)‚úÖ Build termin√©! Fichiers dans le dossier dist/$(NC)"

# Pr√©visualisation de la version de production
.PHONY: preview
preview: ## Pr√©visualise la version de production (n√©cessite un build d'abord)
	@if [ ! -d "$(DIST)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Aucun build trouv√©. Construction en cours...$(NC)"; \
		$(MAKE) build; \
	fi
	@echo "$(BLUE)üëÄ D√©marrage du serveur de pr√©visualisation...$(NC)"
	@echo "$(YELLOW)üí° Ouvrez http://localhost:4173 dans votre navigateur$(NC)"
	@npm run preview

# V√©rification du code avec ESLint
.PHONY: lint
lint: check-deps ## V√©rifie le code avec ESLint
	@echo "$(BLUE)üîç V√©rification du code avec ESLint...$(NC)"
	@npm run lint
	@echo "$(GREEN)‚úÖ Code v√©rifi√©!$(NC)"

# Nettoyage
.PHONY: clean
clean: ## Nettoie les dossiers node_modules et dist
	@echo "$(BLUE)üßπ Nettoyage des dossiers...$(NC)"
	@rm -rf $(NODE_MODULES)
	@rm -rf $(DIST)
	@rm -rf .vite
	@echo "$(GREEN)‚úÖ Nettoyage termin√©!$(NC)"

# Installation compl√®te et d√©marrage
.PHONY: run
run: ## Installation compl√®te + d√©marrage (recommand√© pour la premi√®re fois)
	@echo "$(BLUE)üéØ D√©marrage complet de l'application...$(NC)"
	@echo ""
	@echo "$(YELLOW)√âtape 1/2: Installation des d√©pendances$(NC)"
	@$(MAKE) install
	@echo ""
	@echo "$(YELLOW)√âtape 2/2: D√©marrage en mode d√©veloppement$(NC)"
	@$(MAKE) dev

# R√©installation compl√®te
.PHONY: reinstall
reinstall: clean install ## Nettoie tout et r√©installe les d√©pendances
	@echo "$(GREEN)‚úÖ R√©installation termin√©e!$(NC)"

# V√©rification de l'environnement
.PHONY: check-env
check-env: ## V√©rifie que l'environnement est pr√™t
	@echo "$(BLUE)üîß V√©rification de l'environnement...$(NC)"
	@echo -n "Node.js: "
	@if command -v node >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ $$(node --version)$(NC)"; \
	else \
		echo "$(RED)‚ùå Non install√©$(NC)"; \
		echo "$(YELLOW)üí° Installez Node.js depuis https://nodejs.org/$(NC)"; \
		exit 1; \
	fi
	@echo -n "npm: "
	@if command -v npm >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ $$(npm --version)$(NC)"; \
	else \
		echo "$(RED)‚ùå Non install√©$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Environnement pr√™t!$(NC)"

# Informations sur le projet
.PHONY: info
info: ## Affiche les informations sur le projet
	@echo "$(BLUE)üìã Informations sur le projet$(NC)"
	@echo ""
	@echo "$(YELLOW)Nom:$(NC) ToDo App"
	@echo "$(YELLOW)Description:$(NC) Application de gestion des t√¢ches"
	@echo "$(YELLOW)Technologies:$(NC) React + TypeScript + Tailwind CSS + DaisyUI"
	@echo "$(YELLOW)Bundler:$(NC) Vite"
	@echo ""
	@if [ -f "$(PACKAGE_JSON)" ]; then \
		echo "$(YELLOW)Version:$(NC) $$(grep '"version"' $(PACKAGE_JSON) | cut -d'"' -f4)"; \
		echo "$(YELLOW)Scripts disponibles:$(NC)"; \
		npm run | grep -E '^\s+[a-zA-Z]' | sed 's/^/  /'; \
	fi
	@echo ""

# Test complet
.PHONY: test
test: check-env lint ## Lance tous les tests (environnement + lint)
	@echo "$(GREEN)‚úÖ Tous les tests sont pass√©s!$(NC)"

# D√©ploiement (build + info)
.PHONY: deploy
deploy: build ## Pr√©pare l'application pour le d√©ploiement
	@echo "$(BLUE)üöÄ Pr√©paration pour le d√©ploiement...$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ Application pr√™te pour le d√©ploiement!$(NC)"
	@echo "$(YELLOW)üí° Le dossier 'dist/' contient tous les fichiers n√©cessaires$(NC)"
	@echo "$(YELLOW)üí° Vous pouvez maintenant d√©ployer sur:$(NC)"
	@echo "   - Vercel (vercel --prod)"
	@echo "   - Netlify (netlify deploy --prod --dir=dist)"
	@echo "   - GitHub Pages"
	@echo "   - Ou tout autre h√©bergeur statique"
	@echo ""

# Affichage des statistiques
.PHONY: stats
stats: ## Affiche les statistiques du projet
	@echo "$(BLUE)üìä Statistiques du projet$(NC)"
	@echo ""
	@if [ -d "src" ]; then \
		echo "$(YELLOW)Fichiers TypeScript/JavaScript:$(NC) $$(find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | wc -l)"; \
		echo "$(YELLOW)Lignes de code:$(NC) $$(find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -exec cat {} \; | wc -l)"; \
	fi
	@if [ -d "$(NODE_MODULES)" ]; then \
		echo "$(YELLOW)Taille node_modules:$(NC) $$(du -sh $(NODE_MODULES) | cut -f1)"; \
	fi
	@if [ -d "$(DIST)" ]; then \
		echo "$(YELLOW)Taille du build:$(NC) $$(du -sh $(DIST) | cut -f1)"; \
	fi
	@echo ""

# D√©veloppement avec auto-reload
.PHONY: watch
watch: dev ## Alias pour 'make dev' (mode d√©veloppement avec auto-reload)

# Commandes courtes
.PHONY: i d b p l c r
i: install  ## Raccourci pour 'install'
d: dev      ## Raccourci pour 'dev'
b: build    ## Raccourci pour 'build'
p: preview  ## Raccourci pour 'preview'
l: lint     ## Raccourci pour 'lint'
c: clean    ## Raccourci pour 'clean'
r: run      ## Raccourci pour 'run'
